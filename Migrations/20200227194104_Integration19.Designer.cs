// <auto-generated />
using System;
using DisasterRecoveryAPI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DisasterRecoveryAPI.Migrations
{
    [DbContext(typeof(TimecardContext))]
    [Migration("20200227194104_Integration19")]
    partial class Integration19
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DisasterRecoveryAPI.Models.Jobs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HrRate")
                        .HasColumnType("int");

                    b.Property<string>("JobCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxHrPerDay")
                        .HasColumnType("int");

                    b.Property<int?>("TimecardId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TimecardId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("DisasterRecoveryAPI.Models.Jobs_Timecard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<int?>("JobsId")
                        .HasColumnType("int");

                    b.Property<int>("TimecardId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JobsId");

                    b.HasIndex("TimecardId");

                    b.ToTable("Jobs_Timecards");
                });

            modelBuilder.Entity("DisasterRecoveryAPI.Models.Machines", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HrRent")
                        .HasColumnType("int");

                    b.Property<string>("MachineCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxHrPerDay")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Machines");
                });

            modelBuilder.Entity("DisasterRecoveryAPI.Models.Machines_Timecard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("JobsId")
                        .HasColumnType("int");

                    b.Property<int>("MachineId")
                        .HasColumnType("int");

                    b.Property<int?>("MachinesId")
                        .HasColumnType("int");

                    b.Property<int>("TimecardId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JobsId");

                    b.HasIndex("MachinesId");

                    b.HasIndex("TimecardId");

                    b.ToTable("Machines_Timecards");
                });

            modelBuilder.Entity("DisasterRecoveryAPI.Models.Timecard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SiteCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalJobAmount")
                        .HasColumnType("int");

                    b.Property<int>("TotalJobHrs")
                        .HasColumnType("int");

                    b.Property<int>("TotalMachineAmount")
                        .HasColumnType("int");

                    b.Property<int>("TotalMachineHrs")
                        .HasColumnType("int");

                    b.Property<bool>("isConfirmed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Timecards");
                });

            modelBuilder.Entity("DisasterRecoveryAPI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DisasterRecoveryAPI.Models.Jobs", b =>
                {
                    b.HasOne("DisasterRecoveryAPI.Models.Timecard", "Timecard")
                        .WithMany()
                        .HasForeignKey("TimecardId");
                });

            modelBuilder.Entity("DisasterRecoveryAPI.Models.Jobs_Timecard", b =>
                {
                    b.HasOne("DisasterRecoveryAPI.Models.Jobs", "Jobs")
                        .WithMany("Jobs_Timecard")
                        .HasForeignKey("JobsId");

                    b.HasOne("DisasterRecoveryAPI.Models.Timecard", "Timecard")
                        .WithMany("Jobs_Timecards")
                        .HasForeignKey("TimecardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DisasterRecoveryAPI.Models.Machines_Timecard", b =>
                {
                    b.HasOne("DisasterRecoveryAPI.Models.Jobs", "Jobs")
                        .WithMany()
                        .HasForeignKey("JobsId");

                    b.HasOne("DisasterRecoveryAPI.Models.Machines", null)
                        .WithMany("Machines_Timecards")
                        .HasForeignKey("MachinesId");

                    b.HasOne("DisasterRecoveryAPI.Models.Timecard", "Timecard")
                        .WithMany("Machines_Timecards")
                        .HasForeignKey("TimecardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
